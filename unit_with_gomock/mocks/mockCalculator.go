// Code generated by MockGen. DO NOT EDIT.
// Source: ../calculator.go

// Package mock_unit_with_gomock is a generated GoMock package.
package mock_unit_with_gomock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCalculator is a mock of Calculator interface
type MockCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorMockRecorder
}

// MockCalculatorMockRecorder is the mock recorder for MockCalculator
type MockCalculatorMockRecorder struct {
	mock *MockCalculator
}

// NewMockCalculator creates a new mock instance
func NewMockCalculator(ctrl *gomock.Controller) *MockCalculator {
	mock := &MockCalculator{ctrl: ctrl}
	mock.recorder = &MockCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCalculator) EXPECT() *MockCalculatorMockRecorder {
	return m.recorder
}

// SetFactor mocks base method
func (m *MockCalculator) SetFactor(num int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFactor", num)
}

// SetFactor indicates an expected call of SetFactor
func (mr *MockCalculatorMockRecorder) SetFactor(num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFactor", reflect.TypeOf((*MockCalculator)(nil).SetFactor), num)
}

// Calculate mocks base method
func (m *MockCalculator) Calculate(x int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Calculate", x)
	ret0, _ := ret[0].(int)
	return ret0
}

// Calculate indicates an expected call of Calculate
func (mr *MockCalculatorMockRecorder) Calculate(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Calculate", reflect.TypeOf((*MockCalculator)(nil).Calculate), x)
}
